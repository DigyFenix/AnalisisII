package Views;

import Controladores.DaoIngresoEgreso;
import Controladores.DaoMovimiento;
import DigyFenix.*;
import Enums.InsertUpdate;
import Modelos.IngresoEgreso;
import Modelos.Movimiento;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author echacon
 */
public class VCargaDescuentos extends javax.swing.JInternalFrame {

    List<IngresoEgreso> listEgresos = new ArrayList<>();
    Calendar cal = Calendar.getInstance();
    Movimiento movAhorro;
    Movimiento movDescuento;
    boolean error = false;
    DaoIngresoEgreso daoEgre;
    Date fecha;

    /**
     * Creates new form v_empresa
     */
    public VCargaDescuentos() {
        initComponents();

        //Configuro los botonos
        DFUtils.setColorABotton(btnGuardar);
        DFUtils.setColorABotton(btnNuevo);

        getMovimiento();

        if (error) {
            btnGuardar.setVisible(false);
            btnNuevo.setVisible(false);
            chkHoy.setVisible(false);
            txbFecha.setVisible(false);
            jLabel1.setVisible(false);
            lblProgreso.setText("Debe crear un los movimientos de EGRESO llamados \n\"Asociacion solidarista - Tienda\"\n\"Asociacion solidarista - Ahorro\"");
        }
    }

    private void getMovimiento() {
        try {
            movAhorro = new DaoMovimiento().buscarPorDescripcionLikeSingle("Asociacion solidarista - Ahorro");
            movDescuento = new DaoMovimiento().buscarPorDescripcionLikeSingle("Asociacion solidarista - Tienda");
            if (movAhorro == null || movDescuento == null) {
                error = true;
            }
            if (!movAhorro.getTipo().equals("EGRESO") || !movDescuento.getTipo().equals("EGRESO")) {
                error = true;
            }
        } catch (Exception e) {
            error = true;
        }
        if (error) {
            DFOptionPane.mostrar_Error("Debe crear un los movimientos de EGRESO llamados \n\"Asociacion solidarista - Tienda\"\n\"Asociacion solidarista - Ahorro\"");
        }
    }

    private void guardar() {

        try {
            daoEgre = new DaoIngresoEgreso();
            boolean errorInsert = false;
            for (IngresoEgreso t : listEgresos) {
                try {
                    daoEgre.insertarActualizar(t, InsertUpdate.INSERTAR);
                } catch (Exception e) {
                    errorInsert = true;
                }
            }
            if (!errorInsert) {
                DFOptionPane.mostrar_Realizado("Datos insertados corretamente");
                listEgresos = new ArrayList<>();
            }
        } catch (Exception e) {
            DFOptionPane.mostrar_Error(e.toString());
        }

    }

    private void cargar(File file) {
        try {
            Utils.SWLeerDescuentos sw = new Utils.SWLeerDescuentos(pbProgreso, lblProgreso, file, listEgresos, tblDescuentos,
                    this.fecha,
                    movDescuento.getIdrhMovimiento(),
                    movAhorro.getIdrhMovimiento(),
                    lblTienda, lblAhorro);
            sw.execute();
        } catch (Exception e) {
            DFOptionPane.mostrar_Error(e.toString());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDescuentos = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        lblTienda = new javax.swing.JLabel();
        pbProgreso = new javax.swing.JProgressBar();
        lblProgreso = new javax.swing.JLabel();
        txbFecha = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        chkHoy = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        lblAhorro = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Carga masiva de descuentos de asociacion a empleados");
        setMaximumSize(new java.awt.Dimension(714, 469));
        setMinimumSize(new java.awt.Dimension(714, 469));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(714, 469));
        getContentPane().setLayout(null);

        btnGuardar.setBackground(new java.awt.Color(0, 153, 102));
        btnGuardar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Insertar");
        btnGuardar.setBorder(null);
        btnGuardar.setBorderPainted(false);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setOpaque(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar);
        btnGuardar.setBounds(600, 390, 80, 40);

        tblDescuentos.setAutoCreateRowSorter(true);
        tblDescuentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblDescuentos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 10, 680, 300);

        btnNuevo.setBackground(new java.awt.Color(0, 153, 102));
        btnNuevo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setText("Cargar archivo");
        btnNuevo.setBorder(null);
        btnNuevo.setBorderPainted(false);
        btnNuevo.setContentAreaFilled(false);
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.setOpaque(false);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo);
        btnNuevo.setBounds(190, 390, 120, 40);

        lblTienda.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblTienda.setForeground(new java.awt.Color(102, 0, 0));
        lblTienda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblTienda);
        lblTienda.setBounds(330, 390, 100, 40);

        pbProgreso.setStringPainted(true);
        getContentPane().add(pbProgreso);
        pbProgreso.setBounds(10, 310, 680, 30);

        lblProgreso.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblProgreso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblProgreso);
        lblProgreso.setBounds(10, 340, 680, 20);

        txbFecha.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        getContentPane().add(txbFecha);
        txbFecha.setBounds(10, 390, 110, 40);

        jLabel1.setForeground(new java.awt.Color(102, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Total Tienda");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(330, 370, 100, 16);

        chkHoy.setText("Hoy");
        chkHoy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkHoyStateChanged(evt);
            }
        });
        getContentPane().add(chkHoy);
        chkHoy.setBounds(120, 400, 50, 20);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Fecha para el ingreso");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 370, 160, 16);

        lblAhorro.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblAhorro.setForeground(new java.awt.Color(0, 102, 51));
        lblAhorro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblAhorro);
        lblAhorro.setBounds(470, 390, 100, 40);

        jLabel3.setForeground(new java.awt.Color(0, 102, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Total Ahorro");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(470, 370, 100, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (listEgresos.size() > 0) {
            if (JOptionPane.showConfirmDialog(null, "Esta seguro que desea insertar el archivo\nEsta opcion No se puede revertir", "Confirmacion", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                guardar();
            }
        } else {
            DFOptionPane.mostrar_Error("No hay datos para insertar");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        try {
            if (DFDate.validarFecha(txbFecha.getText())) {
                this.fecha = DFDate.get_fechaDate(txbFecha.getText());
                FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("Archivos de excel", "xlsx");
                File file = DFFile.openFileChooser(filtroImagen, this);
                if (file != null) {
                    cargar(file);
                }
            } else {
                DFOptionPane.mostrar_Error("Antes de iniciar la carga, debe ingresar la fecha con la que se guardaran los datos");
            }
        } catch (Exception e) {
            DFOptionPane.mostrar_Error(e.toString());
        }

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void chkHoyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkHoyStateChanged
        if (chkHoy.isSelected()) {
            Calendar cal = Calendar.getInstance();
            Date date = cal.getTime();
            try {
                txbFecha.setText(DFDate.get_fecha(date));
            } catch (Exception e) {
            }
        } else {
            txbFecha.setText("");
        }
    }//GEN-LAST:event_chkHoyStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JCheckBox chkHoy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAhorro;
    private javax.swing.JLabel lblProgreso;
    private javax.swing.JLabel lblTienda;
    private javax.swing.JProgressBar pbProgreso;
    private javax.swing.JTable tblDescuentos;
    private javax.swing.JTextField txbFecha;
    // End of variables declaration//GEN-END:variables

}
